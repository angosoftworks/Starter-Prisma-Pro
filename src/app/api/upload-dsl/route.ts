import { NextResponse } from "next/server";
import { auth } from "@/lib/API/Services/auth/auth"; // ‚úÖ tu l‚Äôexportes d√©j√† !
import { prisma } from "@/lib/prisma";

// üîÑ Utilitaire pour extraire le nom du Blueprint
function extractBPName(dsl: string): string {
  const match = dsl.match(/@BP\|Type=.*?\|Name=(.+)/);
  return match?.[1]?.trim() ?? "UnknownBP";
}

// ‚úÖ POST: Enregistrement d‚Äôun Blueprint li√© √† l‚Äôutilisateur ET √† une organization
export async function POST(req: Request) {
  try {
    const session = await auth(); // ‚úÖ ta propre fonction auth()

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
    }

    const { dsl, organizationId } = await req.json();

    if (!dsl || !organizationId) {
      return NextResponse.json({ error: "Donn√©es manquantes" }, { status: 400 });
    }

    const userId = session.user.id;
    const name = extractBPName(dsl);

    await prisma.blueprint.create({
      data: {
        name,
        dsl,
        userId,
        organizationId,
      },
    });

    return NextResponse.json({ success: true, message: "DSL enregistr√© en DB ‚úÖ" });
  } catch (err) {
    console.error("‚ùå Erreur enregistrement DSL :", err);
    return NextResponse.json({ success: false, error: "Erreur serveur" }, { status: 500 });
  }
}